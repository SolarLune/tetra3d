//kage:unit pixels
package main

var BGColor vec4
var FGColor vec4

var ShadowVector vec2
var ShadowLength float
var ShadowColorNear vec4
var ShadowColorFar vec4
var ShadowColorFarSet float

var OutlineThickness float
var OutlineRounded float
var OutlineColor vec4

// This is just a stub to get the shader to compile; we're piggybacking off of 
// Tetra3d's default shader, which has depth testing and fog and stuff, so we
// just create a custom fragment shader named CustomFragment.
// func Fragment(dstPos vec4, srcPos vec2, col vec4) vec4 {}

// The CustomFragment function is the same as the default Fragment function
// (and the arguments mean the same things) except for the defaultColor argument,
// which is the result of the shader from the generic 3D shader part.
func CustomFragment(dstPos vec4, srcPos vec2, col vec4) vec4 {

    res := imageSrc0UnsafeAt(srcPos)
    color := FGColor
    transparency := res.a
    colorSet := false
    shadowSet := false

    // Shadows

    if ShadowLength > 0.0 && (ShadowVector.x != 0 || ShadowVector.y != 0) && res.a < 0.5 {
        shadowSet = true

        shadowV := vec2(ShadowVector.x, ShadowVector.y)
        check := srcPos

        for i := 1.0; i < 16.0; i++ {

            if i > ShadowLength {
                break
            }

            shaded := false
            
            check.x += shadowV.x

            if imageSrc0UnsafeAt(check).a > 0.5 {
                shaded = true
            }

            check.y += shadowV.y

            if imageSrc0UnsafeAt(check).a > 0.5 {
                shaded = true
            }

            if shaded {
                color = ShadowColorNear
                if ShadowColorFarSet > 0 {
                    color = mix(ShadowColorNear, ShadowColorFar, (distance(check, srcPos)-1) / ShadowLength)
                }
                transparency = 1.0
                colorSet = true
                break
            }

        }

    }

    // Outlines

    if !colorSet && OutlineThickness > 0.0 && res.a < 0.5 {

        found := false

        for shadowI := 0.0; shadowI < 16.0; shadowI++ {

            if (!shadowSet && shadowI > 0) || shadowI > ShadowLength {
                break
            }

            for x := -16.0; x < 16.0; x++ {

                for y := -16.0; y < 16.0; y++ {
                    
                    if x >= -OutlineThickness && x <= OutlineThickness && y >= -OutlineThickness && y <= OutlineThickness {

                        srcTexels := vec2(srcPos.x + (x + 0.01), srcPos.y + (y + 0.01))
                        if shadowSet {
                            srcTexels += ShadowVector * shadowI
                        }

                        if imageSrc0UnsafeAt(srcTexels).a > 0.5 {

                            if OutlineRounded < 1 || (distance(srcPos + vec2(x,y), srcPos) <= OutlineThickness) {

                                color = OutlineColor
                                transparency = 1.0
                                found = true

                            }

                        }

                    }

                    if found {
                        break
                    }

                }

                if found {
                    break
                }
                
            }

        }

    }

    // Alternate between the BG color and the FG color using the transparency of the original text image
    // as modulation
    return mix(BGColor.rgba * col, color * col, transparency)

}

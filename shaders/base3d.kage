//kage:unit pixels

package main

var Fog vec4
var FogRange [2]float
var DitherSize float
var FogCurve float
var Fogless float
var PerspectiveCorrection int

var BayerMatrix [16]float

func decodeDepth(rgba vec4) float {
	return rgba.r + (rgba.g / 255) + (rgba.b / 65025)
}

func OutCirc(v float) float {
	return sqrt(1 - pow(v - 1, 2))
}

func InCirc(v float) float {
	return 1 - sqrt(1 - pow(v, 2))
}

func dstPosToSrcPos(dstPos vec2) vec2 {
	return dstPos.xy - imageDstOrigin() + imageSrc0Origin()
}

func unpackFloat(input float, precision float) vec2 {
	return vec2(input / precision, mod(input, 1) / 0.05)
}

// tetra3d Custom Uniform Location //

func Fragment(dstPos vec4, srcPos vec2, vc vec4) vec4 {

	color := vc
	// We store the depth in the alpha channel
	unpacked := unpackFloat(vc.a, 256)
	z := 1.0 / unpacked.y

	depth := imageSrc1UnsafeAt(dstPosToSrcPos(dstPos.xy))
	
	if depth.a > 0 {

		srcOrigin := imageSrc0Origin()
		srcSize := imageSrc0Size()

		// There's atlassing going on behind the scenes here, so:
		// Subtract the source position by the src texture's origin on the atlas.
		// This gives us the actual pixel coordinates.
		tx := srcPos - srcOrigin

		// Divide by the source image size to get the UV coordinates.
		tx /= srcSize

		if PerspectiveCorrection > 0 {
			tx *= z
			color.a = unpacked.x
		}
		
		// Apply fract() to loop the UV coords around [0-1].
		tx = fract(tx)

		// Multiply by the size to get the pixel coordinates again.
		tx *= srcSize

		// tetra3d Custom Fragment Call Location //
		colorTex := imageSrc0UnsafeAt(tx + srcOrigin) * color

		// We have to multiply the rgb component by a to fade out over time
		colorTex.rgb *= color.a
		
		if Fogless == 0 {

			var d float
		
			if FogCurve == 0 {
				d = smoothstep(FogRange[0], FogRange[1], decodeDepth(depth))
			} else if FogCurve == 1 {
				d = smoothstep(FogRange[0], FogRange[1], OutCirc(decodeDepth(depth)))
			} else if FogCurve == 2 {
				d = smoothstep(FogRange[0], FogRange[1], InCirc(decodeDepth(depth)))
			}

			if DitherSize > 0 {

				yc := int(dstPos.y / DitherSize)%4
				xc := int(dstPos.x / DitherSize)%4

				fogMult := step(0, d - BayerMatrix[(yc*4) + xc])

				// Fog mode is 4th channel in Fog vector ([4]float32)
				if Fog.a == 0 {
					colorTex.rgb += Fog.rgb * fogMult * colorTex.a
				} else if Fog.a == 1 {
					colorTex.rgb -= Fog.rgb * fogMult * colorTex.a
				} else if Fog.a == 2 {
					colorTex.rgb = mix(colorTex.rgb, Fog.rgb, fogMult) * colorTex.a
				} else if Fog.a == 3 {
					colorTex.a *= abs(1-d) * step(0, abs(1-d) - BayerMatrix[(yc*4) + xc])
					colorTex.rgb = mix(vec3(0, 0, 0), colorTex.rgb, colorTex.a)
				}

			} else {

				if Fog.a == 0 {
					colorTex.rgb += Fog.rgb * d * colorTex.a
				} else if Fog.a == 1 {
					colorTex.rgb -= Fog.rgb * d * colorTex.a
				} else if Fog.a == 2 {
					colorTex.rgb = mix(colorTex.rgb, Fog.rgb, d) * colorTex.a
				} else if Fog.a == 3 {
					colorTex.a *= abs(1-d)
					colorTex.rgb = mix(vec3(0, 0, 0), colorTex.rgb, colorTex.a)
				}

			}

		}
		


		return colorTex

	}

	discard()

}

// tetra3d Custom Fragment Definition Location //

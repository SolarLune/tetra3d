//kage:unit pixels

package main

var Fog vec4
var FogRange [2]float
var DitherSize float
var FogCurve float
var Fogless float
var PerspectiveCorrection int
var TextureFilterMode int

var TextureMapMode int
var TextureMapScreenSize float

var BayerMatrix [16]float

func decodeDepth(rgba vec4) float {
	return rgba.r + (rgba.g / 255) + (rgba.b / 65025)
}

func OutCirc(v float) float {
	return sqrt(1 - pow(v - 1, 2))
}

func InCirc(v float) float {
	return 1 - sqrt(1 - pow(v, 2))
}

func dstPosToSrcPos(dstPos vec2) vec2 {
	return dstPos.xy - imageDstOrigin() + imageSrc0Origin()
}

func bilinearFilter(srcPos vec2) vec4 {
	
	srcOrigin := imageSrc0Origin()
	srcSize := imageSrc0Size()

	s1 := imageSrc0UnsafeAt(mod(srcPos, srcSize) + srcOrigin)
	s2 := imageSrc0UnsafeAt(mod(srcPos + vec2(1, 0), srcSize) + srcOrigin)
	s3 := imageSrc0UnsafeAt(mod(srcPos + vec2(1, 1), srcSize) + srcOrigin)
	s4 := imageSrc0UnsafeAt(mod(srcPos + vec2(0, 1), srcSize) + srcOrigin)

	fu := fract((srcPos / srcSize) + 0.5) 

	return mix(
		mix(s1, s2, fu.x),
		mix(s3, s4, fu.x),
		fu.y,
	)
}

func nearestFilter(srcPos vec2) vec4 {
	return imageSrc0UnsafeAt(srcPos + imageSrc0Origin())
}

// tetra3d Custom Uniform Location //

func Fragment(dstPos vec4, srcPos vec2, vc, custom vec4) vec4 {

	color := vc

	depth := imageSrc1UnsafeAt(dstPosToSrcPos(dstPos.xy))
	
	if depth.a > 0 {

		srcOrigin := imageSrc0Origin()
		srcSize := imageSrc0Size()

		// There's atlassing going on behind the scenes here, so:
		// Subtract the source position by the src texture's origin on the atlas.
		// This gives us the actual pixel coordinates.
		tx := srcPos - srcOrigin

		if TextureMapMode == 1 {
			tx = (dstPos.xy * TextureMapScreenSize) + (srcPos - srcOrigin)
		} else if PerspectiveCorrection > 0 {
			tx *= 1.0 / custom.x // depth is stored in ebiten.Vertex.Custom0
		}

		tx = mod(tx, srcSize) // Wrap the texture to the source texture's size
		
		var colorTex vec4
		if TextureFilterMode == 0 {
			colorTex = nearestFilter(tx) * color
		} else {
			colorTex = bilinearFilter(tx) * color
		}

		// tetra3d Custom Fragment Call Location //
		
		// We have to multiply the rgb component by a to fade out over time
		colorTex.rgb *= color.a
		
		if Fogless == 0 {

			var d float
		
			if FogCurve == 0 {
				d = smoothstep(FogRange[0], FogRange[1], decodeDepth(depth))
			} else if FogCurve == 1 {
				d = smoothstep(FogRange[0], FogRange[1], OutCirc(decodeDepth(depth)))
			} else if FogCurve == 2 {
				d = smoothstep(FogRange[0], FogRange[1], InCirc(decodeDepth(depth)))
			}

			if DitherSize > 0 {

				yc := int(dstPos.y / DitherSize)%4
				xc := int(dstPos.x / DitherSize)%4

				fogMult := step(0, d - BayerMatrix[(yc*4) + xc])

				// Fog mode is 4th channel in Fog vector ([4]float32)
				if Fog.a == 0 {
					colorTex.rgb += Fog.rgb * fogMult * colorTex.a
				} else if Fog.a == 1 {
					colorTex.rgb -= Fog.rgb * fogMult * colorTex.a
				} else if Fog.a == 2 {
					colorTex.rgb = mix(colorTex.rgb, Fog.rgb, fogMult) * colorTex.a
				} else if Fog.a == 3 {
					colorTex.a *= abs(1-d) * step(0, abs(1-d) - BayerMatrix[(yc*4) + xc])
					colorTex.rgb = mix(vec3(0, 0, 0), colorTex.rgb, colorTex.a)
				}

			} else {

				if Fog.a == 0 {
					colorTex.rgb += Fog.rgb * d * colorTex.a
				} else if Fog.a == 1 {
					colorTex.rgb -= Fog.rgb * d * colorTex.a
				} else if Fog.a == 2 {
					colorTex.rgb = mix(colorTex.rgb, Fog.rgb, d) * colorTex.a
				} else if Fog.a == 3 {
					colorTex.a *= abs(1-d)
					colorTex.rgb = mix(vec3(0, 0, 0), colorTex.rgb, colorTex.a)
				}

			}

		}
		


		return colorTex

	}

	discard()

}

// tetra3d Custom Fragment Definition Location //
